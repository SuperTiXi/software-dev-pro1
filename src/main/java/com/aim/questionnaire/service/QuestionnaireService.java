package com.aim.questionnaire.service;

import com.aim.questionnaire.dao.QuestionnaireEntityMapper;
import com.aim.questionnaire.dao.entity.QuestionnaireEntity;
import com.aim.questionnaire.dao.entity.QuestionnaireEntity;
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Service;
import com.aim.questionnaire.common.utils.DateUtil;
import com.aim.questionnaire.common.utils.UUIDUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class QuestionnaireService {
    
    @Autowired
    private QuestionnaireEntityMapper questionnaireEntityMapper;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table questionnaire_info
     *
     * @mbg.generated
     */
    public int deleteByPrimaryKey(String id) {
        return questionnaireEntityMapper.deleteByPrimaryKey(id);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table questionnaire_info
     *
     * @mbg.generated
     */
    public int insert(QuestionnaireEntity record) {
        return questionnaireEntityMapper.insert(record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table questionnaire_info
     *
     * @mbg.generated
     */
    public int insertSelective(QuestionnaireEntity record) {
        return questionnaireEntityMapper.insertSelective(record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table questionnaire_info
     *
     * @mbg.generated
     */
    QuestionnaireEntity selectByPrimaryKey(String id) {
        return questionnaireEntityMapper.selectByPrimaryKey(id);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table questionnaire_info
     *
     * @mbg.generated
     */
    public int updateByPrimaryKeySelective(QuestionnaireEntity record) {
        return updateByPrimaryKeySelective(record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table questionnaire_info
     *
     * @mbg.generated
     */
    public int updateByPrimaryKeyWithBLOBs(QuestionnaireEntity record) {
        return questionnaireEntityMapper.updateByPrimaryKeyWithBLOBs(record);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table questionnaire_info
     *
     * @mbg.generated
     */
    public int updateByPrimaryKey(QuestionnaireEntity record) {
        return questionnaireEntityMapper.updateByPrimaryKey(record);
    }


    /**
     * 根据项目id查询此项目下的问卷个数
     * @param projectId
     * @return
     */
    public int selectQuestionCountByProjectId(String projectId){
        return questionnaireEntityMapper.selectQuestionCountByProjectId(projectId);
    }

    /**
     * 根据项目id查询此项目下的全部问卷
     * @param id
     * @return
     */
    public List<Map<String,Object>> queryQuestionListByProjectId(String id){
        return questionnaireEntityMapper.queryQuestionListByProjectId(id);
    }

    /**
     * 根据问卷id查询问卷的概述信息
     * @param id
     * @return
     */
    Map<String,Object> queryQuestionnaireInfoById(String id){
        return questionnaireEntityMapper.queryQuestionnaireInfoById(id);
    }

    /**
     * 查询历史问卷/模糊搜索
     * @param map
     * @return
     */
    public List<Map<String,Object>> queryQuestionnaireList(HashMap<String, Object> map){
        return questionnaireEntityMapper.queryQuestionnaireList(map);
    }

    /**
     * 修改历史问卷表状态
     * @param map
     * @return
     */
    public int modifyHistoryQuestionnaireStatus(HashMap<String, Object> map){
        return questionnaireEntityMapper.modifyHistoryQuestionnaireStatus(map);
    }

    /**
     * 添加问卷
     * @param map
     * @return
     */
    public int addQuestionnaire(HashMap<String, Object> map){
        return questionnaireEntityMapper.addQuestionnaire(map);
    }

    /**
     * 根据问卷id查询问卷的详细信息
     * @param map
     * @return
     */
    Map<String,String> queryQuestionnaireById(HashMap<String, Object> map){
        return questionnaireEntityMapper.queryQuestionnaireById(map);
    }

    /**
     * 添加发送问卷方式
     * @param map
     * @return
     */
    public int addSendQuestionnaire(HashMap<String, Object> map){
        return  questionnaireEntityMapper.addSendQuestionnaire(map);
    }

    /**
     * 根据问卷id修改问卷
     * @param questionnaireEntity
     * @return
     */
    public int modifyQuestionnaireInfo(QuestionnaireEntity questionnaireEntity){
        return questionnaireEntityMapper.modifyQuestionnaireInfo(questionnaireEntity);
    }

    /**
     * 根据项目id查询发布中问卷数量
     * @param questionnaireEntity
     * @return
     */
    public int queryReleaseQuestionnaireCount(QuestionnaireEntity questionnaireEntity){
        return questionnaireEntityMapper.queryReleaseQuestionnaireCount(questionnaireEntity);
    }

    /**
     * 查询问卷的发送问卷的人数
     * @param id
     * @return
     */
    public int selectSendAnswerCount(String id){
        return questionnaireEntityMapper.selectSendAnswerCount(id);
    }

    /**
     * 查询问卷模板
     * @param dataId
     * @return
     */
    public List<Map<String,Object>> queryQuestionnaireMould(String dataId){
        return questionnaireEntityMapper.queryQuestionnaireMould(dataId);
    }

    /**
     * 查询历史问卷
     * @param map
     * @return
     */
    public List<Map<String,Object>> queryHistoryQuestionnaire(HashMap<String, Object> map){
        return questionnaireEntityMapper.queryHistoryQuestionnaire(map);
    }

    /**
     * 根据id修改问卷的全部信息
     * @param map
     * @return
     */
    public int modifyQuestionnaire(HashMap<String, Object> map){
        return questionnaireEntityMapper.modifyQuestionnaire(map);
    }

    /**
     * 修改问卷状态
     * @param map
     * @return
     */
    public int modifyQuestionnaireStatus(HashMap<String, Object> map){
        return questionnaireEntityMapper.modifyQuestionnaireStatus(map);
    }

    /**
     * xxx问卷数量统计
     * @param map
     * @return
     */
    Map<String,Object> queryQuestionnaireCount(HashMap<String, Object> map){
        return questionnaireEntityMapper.queryQuestionnaireCount(map);
    }

    /**
     * 根據問卷id查詢問卷的題目
     * @param questionId
     * @return
     */
    /**
     * add by fuqiang
     * 2018-12-16
     * @param
     * @return
     * start
     */
    Map<String,Object> queryeffectQuestionnaireCount(Map<String, Object> map){
        return questionnaireEntityMapper.queryeffectQuestionnaireCount(map);
    }
    public List<Map<String,Object>> queryeffectQuestionnaireschoolCount(Map<String, Object> map){
        return questionnaireEntityMapper.queryeffectQuestionnaireschoolCount(map);
    }
    public List<Map<String,Object>> queryeffectQuestionnairequestionCount(Map<String, Object> map){
        return questionnaireEntityMapper.queryeffectQuestionnairequestionCount(map);
    }
    /**
     * add by fuqiang
     * 2018-12-16
     * @param
     * @return
     * end
     */
    Map<String,Object> selectQuestionTitleById(String questionId){
        return questionnaireEntityMapper.selectQuestionTitleById(questionId);
    }

    /**
     * 查找所有问卷的截止时间，过期问卷除外
     * @return
     */
    public List<Map<String,Object>> selectAllQueEndTime(){
        return questionnaireEntityMapper.selectAllQueEndTime();
    }

    /**
     * 查找所有问卷的开始时间
     * @return
     */
    public List<Map<String,Object>> selectAllQueStartTime(){
        return questionnaireEntityMapper.selectAllQueStartTime();
    }

    /**
     * 设置问卷过期
     */
    public int modifyQuestionnaireStopStatus(Map<String,Object> map){
        return questionnaireEntityMapper.modifyQuestionnaireStopStatus(map);
    }

    /**
     * 查询问卷题目
     * @param questionId
     * @return
     */
    String queryQuestionById(String questionId){
        return questionnaireEntityMapper.queryQuestionById(questionId);
    }

    /**
     * 查询历史问卷个数
     * @param projectId
     * @return
     */
    public int queryQuestHistoryCountByProjectId(String projectId){
        return questionnaireEntityMapper.queryQuestHistoryCountByProjectId(projectId);
    }

    QuestionnaireEntity queryQuestContextEnd(String id){
        return questionnaireEntityMapper.queryQuestContextEnd(id);
    }

    /**
     * 查询此人创建的问卷
     * @param map
     * @return
     */
    public List<Map<String,Object>> queryAllQuestionnaireByCreated(Map<String, Object> map){
        return questionnaireEntityMapper.queryAllQuestionnaireByCreated(map);
    }

    /**
     * 根据问卷id查找问卷状态
     * @param questionId
     * @return
     */
    public int queryQuestionnaireStatus(String questionId){
        return questionnaireEntityMapper.queryQuestionnaireStatus(questionId);
    }


    public void updateSendStudentStatusInfo(List<Map<String, Object>> sendList){

    }

    public void updateSendGraduateStatusInfo(List<Map<String, Object>> sendList){

    }

    public void updateSendTeacherStatusInfo(List<Map<String, Object>> sendList){

    }

    public void updateSendCompanyStatusInfo(List<Map<String, Object>> sendList){

    }

    public List<Map<String,Object>> querySendStudentPeopleInfo(Map<String, Object> mapSendPeopleInfo){
        return questionnaireEntityMapper.querySendStudentPeopleInfo(mapSendPeopleInfo);
    }

    public List<Map<String,Object>> querySendGraduatePeopleInfo(Map<String, Object> mapSendPeopleInfo){
        return questionnaireEntityMapper.querySendGraduatePeopleInfo(mapSendPeopleInfo);
    }

    public List<Map<String,Object>> querySendTeacherPeopleInfo(Map<String, Object> mapSendPeopleInfo){
        return questionnaireEntityMapper.querySendTeacherPeopleInfo(mapSendPeopleInfo);
    }

    public List<Map<String,Object>> querySendCompanyPeopleInfo(Map<String, Object> mapSendPeopleInfo){
        return questionnaireEntityMapper.querySendCompanyPeopleInfo(mapSendPeopleInfo);
    }


    String queryQuestionnaireIsStopStatus(String questionId){
        return questionnaireEntityMapper.queryQuestionnaireIsStopStatus(questionId);
    }

    /**
     * 查询所有状态为1的问卷
     * @return
     */
    public List<Map<String,Object>> queryAllQuestionnaire(){
        return questionnaireEntityMapper.queryAllQuestionnaire();
    }

    /**
     * 批量插入问卷答题详情
     * @param resultList
     * @param tableName
     * @return
     */
    public int addQuestionRecordAnswerCount(List<Map<String, Object>> resultList,String tableName){
        return questionnaireEntityMapper.addQuestionRecordAnswerCount(resultList,tableName);
    }

    /**
     * 批量插入学校答题情况明细
     * @param resultList
     * @param tableName
     * @return
     */
    public int addQuestionRecordAnswerSchool(List<Map<String, Object>> resultList, String tableName){
        return questionnaireEntityMapper.addQuestionRecordAnswerSchool(resultList,tableName);
    }

    /**
     * 数量统计
     * @param map
     * @return
     */
    Map<String,Object> queryQuestionRecordCountSchool(HashMap<String, Object> map){
        return questionnaireEntityMapper.queryQuestionRecordCountSchool(map);
    }

    /**
     * XXX问卷学校答题情况明细
     * @param map
     * @return
     */
    public List<Map<String,Object>> queryRecordCountSchool(HashMap<String, Object> map){
        return questionnaireEntityMapper.queryRecordCountSchool(map);
    }

    /**
     * XXX问卷答题详情
     * @param map
     * @return
     */
    public List<Map<String,Object>> queryRecordCountAnswer(HashMap<String, Object> map){
        return questionnaireEntityMapper.queryRecordCountAnswer(map);
    }

    /**
     * 查询所有学校
     * @param map
     * @return
     */
    List<String> selectRecordCountSchool(Map<String, Object> map){
        return questionnaireEntityMapper.selectRecordCountSchool(map);
    }

    /**
     * 批量修改数据
     * @param tableName
     * @param resultList
     * @return
     */
    public int modifyQuestionRecordAnswerSchool( String tableName, List<Map<String, Object>> resultList){
        return questionnaireEntityMapper.modifyQuestionRecordAnswerSchool(tableName,resultList);
    }

    /**
     * 添加学校信息
     * @param map
     * @return
     */
    public int addRecordCountSchool(Map<String,Object> map){
        return questionnaireEntityMapper.addRecordCountSchool(map);
    }

    /**
     * 創建答案統計表格
     * @param tableNameAnswer
     */
    public void createRecordCountAnswer(String tableNameAnswer){

    }

    /**
     * 創建學校統計表格
     * @param tableNameSchool
     */
    public void createRecordCountSchool(String tableNameSchool){

    }

    /**
     * 刪除表格
     * @param tableNameAnswer 答案統計表
     * @param tableNameSchool 學校統計表
     * @param questionId 問卷臨時手機號表
     * @return
     */
    public int deleteTableByTableName(String tableNameAnswer,String tableNameSchool,String questionId){
        return questionnaireEntityMapper.deleteTableByTableName(tableNameAnswer,tableNameSchool,questionId);
    }

    /**
     * 修改答题人为0的统计
     * @param tableName
     * @return
     */
    public int modifyAnswerRateNull(String tableName){
        return questionnaireEntityMapper.modifyAnswerRateNull(tableName);
    }

    public void newQuestionnaireSendTable(String id){

    }

    /**
     * 修改答题人答题是否有效状态
     * @param map
     * @return
     */
    public int modifyAnswerIsValid(Map<String, Object> map){
        return questionnaireEntityMapper.modifyAnswerIsValid(map);
    }

    /**
     * 修改问卷的创建人和修改人根据用户名
     * @param map
     * @return
     */
    public int modifyQuestionCreadBy(Map<String, Object> map){
        return questionnaireEntityMapper.modifyQuestionCreadBy(map);
    }

    public int modifyAnswerIsValidNot(Map<String, Object> map){
        return questionnaireEntityMapper.modifyAnswerIsValidNot(map);
    }

    public int selectByName(String questionName){
        return questionnaireEntityMapper.selectByName(questionName);
    }

    public int selectByNameId(String questionName,String id){
        return questionnaireEntityMapper.selectByNameId(questionName,id);
    }
}
